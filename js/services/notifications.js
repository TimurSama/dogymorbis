// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
export class NotificationService {
  constructor() {
    this.permission = 'default';
    this.subscription = null;
    this.isSupported = 'Notification' in window;
    this.eventHandlers = new Map();
  }

  async init() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NotificationService...');
    
    if (!this.isSupported) {
      console.warn('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    this.permission = Notification.permission;
    
    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if (this.permission === 'default') {
      await this.requestPermission();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (this.permission === 'granted') {
      await this.initPushNotifications();
    }

    return true;
  }

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async requestPermission() {
    try {
      this.permission = await Notification.requestPermission();
      console.log('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', this.permission);
      
      if (this.permission === 'granted') {
        await this.initPushNotifications();
      }
      
      return this.permission;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return 'denied';
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async initPushNotifications() {
    if (!('serviceWorker' in navigator) || !('PushManager' in window)) {
      console.warn('Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
      return false;
    }

    try {
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
      const registration = await navigator.serviceWorker.ready;
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
      this.subscription = await registration.pushManager.getSubscription();
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
      if (!this.subscription) {
        await this.subscribeToPush();
      }
      
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return false;
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async subscribeToPush() {
    try {
      const registration = await navigator.serviceWorker.ready;
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ VAPID –∫–ª—é—á–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
      const vapidKey = await this.getVapidKey();
      
      this.subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: vapidKey
      });
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await this.sendSubscriptionToServer(this.subscription);
      
      console.log('–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞');
      return this.subscription;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async unsubscribeFromPush() {
    try {
      if (this.subscription) {
        await this.subscription.unsubscribe();
        await this.removeSubscriptionFromServer(this.subscription);
        this.subscription = null;
        console.log('–û—Ç–ø–∏—Å–∫–∞ –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ VAPID –∫–ª—é—á–∞
  async getVapidKey() {
    try {
      const response = await fetch('/api/notifications/vapid-key');
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VAPID –∫–ª—é—á–∞');
      }
      const data = await response.json();
      return data.vapidKey;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VAPID –∫–ª—é—á–∞:', error);
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  async sendSubscriptionToServer(subscription) {
    try {
      const response = await fetch('/api/notifications/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          subscription: subscription.toJSON()
        })
      });
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      }
      
      console.log('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
      throw error;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
  async removeSubscriptionFromServer(subscription) {
    try {
      const response = await fetch('/api/notifications/unsubscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          subscription: subscription.toJSON()
        })
      });
      
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      console.log('–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
    }
  }

  // –ü–æ–∫–∞–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  showNotification(title, options = {}) {
    if (!this.isSupported || this.permission !== 'granted') {
      console.warn('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      return null;
    }

    const defaultOptions = {
      icon: '/assets/icon-192.png',
      badge: '/assets/badge-72.png',
      vibrate: [100, 50, 100],
      requireInteraction: false,
      silent: false,
      tag: 'default',
      data: {}
    };

    const notificationOptions = { ...defaultOptions, ...options };

    try {
      const notification = new Notification(title, notificationOptions);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      notification.onclick = (event) => {
        this.handleNotificationClick(event, notification);
      };
      
      notification.onclose = (event) => {
        this.handleNotificationClose(event, notification);
      };
      
      notification.onshow = (event) => {
        this.handleNotificationShow(event, notification);
      };
      
      this.emit('notificationShown', { title, options: notificationOptions, notification });
      
      return notification;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return null;
    }
  }

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  showMessageNotification(sender, message, roomId) {
    const title = `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${sender.name}`;
    const options = {
      body: message.text.length > 100 ? message.text.substring(0, 100) + '...' : message.text,
      icon: sender.avatar || '/assets/default-avatar.png',
      tag: `message-${roomId}`,
      data: {
        type: 'message',
        roomId: roomId,
        messageId: message.id,
        sender: sender
      },
      actions: [
        {
          action: 'reply',
          title: '–û—Ç–≤–µ—Ç–∏—Ç—å',
          icon: '/assets/reply-icon.png'
        },
        {
          action: 'view',
          title: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
          icon: '/assets/view-icon.png'
        }
      ]
    };

    return this.showNotification(title, options);
  }

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
  showEventNotification(event) {
    const title = `–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event.title}`;
    const options = {
      body: event.description,
      icon: '/assets/event-icon.png',
      tag: `event-${event.id}`,
      data: {
        type: 'event',
        eventId: event.id
      },
      actions: [
        {
          action: 'join',
          title: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
          icon: '/assets/join-icon.png'
        },
        {
          action: 'view',
          title: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
          icon: '/assets/view-icon.png'
        }
      ]
    };

    return this.showNotification(title, options);
  }

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∏—Å—Å–∏–∏
  showMissionNotification(mission) {
    const title = `–ù–æ–≤–∞—è –º–∏—Å—Å–∏—è: ${mission.title}`;
    const options = {
      body: `–ù–∞–≥—Ä–∞–¥–∞: ${mission.reward} –∫–æ—Å—Ç–æ—á–µ–∫`,
      icon: '/assets/mission-icon.png',
      tag: `mission-${mission.id}`,
      data: {
        type: 'mission',
        missionId: mission.id
      },
      actions: [
        {
          action: 'start',
          title: '–ù–∞—á–∞—Ç—å',
          icon: '/assets/start-icon.png'
        },
        {
          action: 'view',
          title: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
          icon: '/assets/view-icon.png'
        }
      ]
    };

    return this.showNotification(title, options);
  }

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
  showAchievementNotification(achievement) {
    const title = `üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!`;
    const options = {
      body: achievement.description,
      icon: achievement.icon || '/assets/achievement-icon.png',
      tag: `achievement-${achievement.id}`,
      data: {
        type: 'achievement',
        achievementId: achievement.id
      },
      requireInteraction: true,
      actions: [
        {
          action: 'share',
          title: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
          icon: '/assets/share-icon.png'
        },
        {
          action: 'view',
          title: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
          icon: '/assets/view-icon.png'
        }
      ]
    };

    return this.showNotification(title, options);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
  handleNotificationClick(event, notification) {
    const data = notification.data;
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.close();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    if (event.action) {
      this.handleNotificationAction(event.action, data);
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∏–∫–∞
      this.handleNotificationData(data);
    }
    
    this.emit('notificationClicked', { action: event.action, data });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  handleNotificationAction(action, data) {
    switch (action) {
      case 'reply':
        this.handleReplyAction(data);
        break;
      case 'view':
        this.handleViewAction(data);
        break;
      case 'join':
        this.handleJoinAction(data);
        break;
      case 'start':
        this.handleStartAction(data);
        break;
      case 'share':
        this.handleShareAction(data);
        break;
      default:
        console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', action);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  handleNotificationData(data) {
    switch (data.type) {
      case 'message':
        this.openChat(data.roomId);
        break;
      case 'event':
        this.openEvent(data.eventId);
        break;
      case 'mission':
        this.openMission(data.missionId);
        break;
      case 'achievement':
        this.openAchievement(data.achievementId);
        break;
      default:
        console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', data.type);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  handleReplyAction(data) {
    if (data.type === 'message') {
      this.openChat(data.roomId, { action: 'reply', messageId: data.messageId });
    }
  }

  handleViewAction(data) {
    this.handleNotificationData(data);
  }

  handleJoinAction(data) {
    if (data.type === 'event') {
      this.joinEvent(data.eventId);
    }
  }

  handleStartAction(data) {
    if (data.type === 'mission') {
      this.startMission(data.missionId);
    }
  }

  handleShareAction(data) {
    if (data.type === 'achievement') {
      this.shareAchievement(data.achievementId);
    }
  }

  // –ú–µ—Ç–æ–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∏)
  openChat(roomId, options = {}) {
    console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞:', roomId, options);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —á–∞—Ç—É
  }

  openEvent(eventId) {
    console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è:', eventId);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–æ–±—ã—Ç–∏—é
  }

  openMission(missionId) {
    console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–∏—Å—Å–∏–∏:', missionId);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ –º–∏—Å—Å–∏–∏
  }

  openAchievement(achievementId) {
    console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', achievementId);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é
  }

  joinEvent(eventId) {
    console.log('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–æ–±—ã—Ç–∏—é:', eventId);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–æ–±—ã—Ç–∏—é
  }

  startMission(missionId) {
    console.log('–ù–∞—á–∞–ª–æ –º–∏—Å—Å–∏–∏:', missionId);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –º–∏—Å—Å–∏–∏
  }

  shareAchievement(achievementId) {
    console.log('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º:', achievementId);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —à–∞—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  handleNotificationClose(event, notification) {
    this.emit('notificationClosed', { notification });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  handleNotificationShow(event, notification) {
    this.emit('notificationShown', { notification });
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  closeAllNotifications() {
    if (this.isSupported) {
      // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–≥–æ–º
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
      console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  isNotificationSupported() {
    return this.isSupported;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  getPermission() {
    return this.permission;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  isPermissionGranted() {
    return this.permission === 'granted';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  getSubscription() {
    return this.subscription;
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  on(event, handler) {
    if (!this.eventHandlers.has(event)) {
      this.eventHandlers.set(event, []);
    }
    this.eventHandlers.get(event).push(handler);
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
  off(event, handler) {
    if (this.eventHandlers.has(event)) {
      const handlers = this.eventHandlers.get(event);
      const index = handlers.indexOf(handler);
      if (index !== -1) {
        handlers.splice(index, 1);
      }
    }
  }

  // –≠–º–∏—Å—Å–∏—è —Å–æ–±—ã—Ç–∏–π
  emit(event, data) {
    if (this.eventHandlers.has(event)) {
      this.eventHandlers.get(event).forEach(handler => {
        try {
          handler(data);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
      });
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  destroy() {
    this.eventHandlers.clear();
    if (this.subscription) {
      this.unsubscribeFromPush();
    }
  }
} 