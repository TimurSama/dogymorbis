// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Dogymorbis
import { AppConfig } from './config.js';
import { Router } from './components/router.js';
import { StateManager } from './services/state.js';
import { AuthService } from './services/auth.js';
import { MapService } from './services/map.js';
import { ChatService } from './services/chat.js';
import { NotificationService } from './services/notifications.js';

class DogymorbisApp {
  constructor() {
    this.config = AppConfig;
    this.router = null;
    this.stateManager = null;
    this.services = {};
    this.isInitialized = false;
  }

  async init() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dogymorbis...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA
      await this.initPWA();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
      await this.initServices();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
      this.initRouter();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
      this.initUI();
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      await this.loadInitialState();
      
      this.isInitialized = true;
      console.log('‚úÖ Dogymorbis —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
      // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      this.start();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
  }

  async initPWA() {
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
    if ('serviceWorker' in navigator) {
      try {
        const registration = await navigator.serviceWorker.register('/sw.js');
        console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
        
        // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if ('Notification' in window && Notification.permission === 'default') {
          await Notification.requestPermission();
        }
      } catch (error) {
        console.warn('Service Worker –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', error);
      }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PWA
    let deferredPrompt;
    window.addEventListener('beforeinstallprompt', (e) => {
      e.preventDefault();
      deferredPrompt = e;
      this.showInstallPrompt();
    });
  }

  async initServices() {
    // –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.stateManager = new StateManager();
    
    // –°–µ—Ä–≤–∏—Å—ã
    this.services.auth = new AuthService(this.config.apiBaseUrl);
    this.services.map = new MapService();
    this.services.chat = new ChatService();
    this.services.notifications = new NotificationService();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    await Promise.all([
      this.services.auth.init(),
      this.services.map.init(),
      this.services.chat.init(),
      this.services.notifications.init()
    ]);
  }

  initRouter() {
    this.router = new Router({
      routes: {
        '/': { component: 'MapPage', title: '–ö–∞—Ä—Ç–∞' },
        '/feed': { component: 'FeedPage', title: '–õ–µ–Ω—Ç–∞' },
        '/shop': { component: 'ShopPage', title: '–ú–∞–≥–∞–∑–∏–Ω' },
        '/dao': { component: 'DaoPage', title: '–°–æ–æ–±—â–µ—Å—Ç–≤–æ' },
        '/profile': { component: 'ProfilePage', title: '–ü—Ä–æ—Ñ–∏–ª—å' },
        '/friends': { component: 'FriendsPage', title: '–î—Ä—É–∑—å—è' },
        '/chat': { component: 'ChatPage', title: '–ß–∞—Ç—ã' },
        '/events': { component: 'EventsPage', title: '–°–æ–±—ã—Ç–∏—è' },
        '/pets': { component: 'PetsPage', title: '–ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã' },
        '/routes': { component: 'RoutesPage', title: '–ú–∞—Ä—à—Ä—É—Ç—ã' },
        '/quests': { component: 'QuestsPage', title: '–ö–≤–µ—Å—Ç—ã' },
        '/partners': { component: 'PartnersPage', title: '–ü–∞—Ä—Ç–Ω—ë—Ä—ã' },
        '/help': { component: 'HelpPage', title: '–ü–æ–º–æ—â—å' },
        '/settings': { component: 'SettingsPage', title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' }
      },
      onRouteChange: (route) => {
        this.updateNavigation(route.path);
        this.updateTitle(route.title);
      }
    });
  }

  initUI() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
    this.initBurgerMenu();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    this.initBottomNavigation();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FAB –∫–Ω–æ–ø–æ–∫
    this.initFloatingActions();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç-–æ–≤–µ—Ä–ª–µ—è
    this.initChatOverlay();
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    this.bindEvents();
  }

  async loadInitialState() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.services.auth.getCurrentUser();
    if (user) {
      this.stateManager.setUser(user);
      this.stateManager.setBoneBalance(user.boneBalance || 0);
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–∏—Å—Å–∏–π
    const missions = await this.services.auth.getActiveMissions();
    this.stateManager.setMissions(missions);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    this.updateUI();
  }

  start() {
    // –ó–∞–ø—É—Å–∫ —Ä–æ—É—Ç–µ—Ä–∞
    this.router.start();
    
    // –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    this.startBackgroundTasks();
    
    // –ü–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!this.stateManager.getUser()) {
      this.showWelcomeScreen();
    }
  }

  initBurgerMenu() {
    const burgerMenu = document.querySelector('.burger-menu');
    const sidebar = document.querySelector('.sidebar');
    const body = document.body;
    
    if (burgerMenu && sidebar) {
      burgerMenu.addEventListener('click', () => {
        sidebar.classList.toggle('active');
        body.classList.toggle('sidebar-open');
      });
      
      // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–µ–Ω—é
      document.addEventListener('click', (e) => {
        if (!sidebar.contains(e.target) && !burgerMenu.contains(e.target)) {
          sidebar.classList.remove('active');
          body.classList.remove('sidebar-open');
        }
      });
    }
  }

  initBottomNavigation() {
    const navItems = document.querySelectorAll('.navbar-item');
    
    navItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.preventDefault();
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        navItems.forEach(nav => nav.classList.remove('active'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        item.classList.add('active');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const route = item.getAttribute('data-route');
        if (route) {
          this.router.navigate(route);
        }
      });
    });
  }

  initFloatingActions() {
    const fabButtons = document.querySelectorAll('.fab-button');
    
    fabButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const action = button.getAttribute('data-action');
        this.handleFloatingAction(action);
      });
    });
  }

  initChatOverlay() {
    const chatToggle = document.querySelector('.chat-toggle');
    const chatOverlay = document.querySelector('.chat-overlay');
    
    if (chatToggle && chatOverlay) {
      chatToggle.addEventListener('click', () => {
        chatOverlay.classList.toggle('active');
      });
      
      // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
      const closeBtn = chatOverlay.querySelector('.close-btn');
      if (closeBtn) {
        closeBtn.addEventListener('click', () => {
          chatOverlay.classList.remove('active');
        });
      }
    }
  }

  bindEvents() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
    window.addEventListener('online', () => this.handleOnlineStatus(true));
    window.addEventListener('offline', () => this.handleOnlineStatus(false));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', () => this.handleResize());
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('visibilitychange', () => this.handleVisibilityChange());
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    window.addEventListener('popstate', () => {
      this.router.handleRouteChange(window.location.pathname);
    });
  }

  handleFloatingAction(action) {
    switch (action) {
      case 'create':
        this.showCreateMenu();
        break;
      case 'ai':
        this.openAIHelper();
        break;
      case 'walk':
        this.startWalk();
        break;
      case 'event':
        this.createEvent();
        break;
      default:
        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', action);
    }
  }

  showCreateMenu() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ—Å—Ç, —Å–æ–±—ã—Ç–∏–µ, –ø—Ä–æ–≥—É–ª–∫–∞)
    this.showNotification('–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è...', 'info');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ–ø—Ü–∏—è–º–∏
  }

  openAIHelper() {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º AI –ø–æ–º–æ—â–Ω–∏–∫–∞
    this.showNotification('AI –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è...', 'info');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç AI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  }

  async startWalk() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      const position = await this.getCurrentPosition();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.stateManager.setLocation(position);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      this.showNotification('–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! üêï', 'success');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫–∞—Ä—Ç—É
      this.router.navigate('/map');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥—É–ª–∫–∏:', error);
      this.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.', 'error');
    }
  }

  createEvent() {
    this.showNotification('–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è...', 'info');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
  }

  findFriends() {
    this.showNotification('–ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π...', 'info');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
  }

  handleOnlineStatus(isOnline) {
    if (isOnline) {
      this.showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
      this.syncData();
    } else {
      this.showNotification('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º', 'warning');
    }
  }

  handleResize() {
    // –û–±–Ω–æ–≤–ª—è–µ–º layout –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    this.updateLayout();
  }

  handleVisibilityChange() {
    if (document.hidden) {
      this.pauseBackgroundTasks();
    } else {
      this.resumeBackgroundTasks();
    }
  }

  updateNavigation(route) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navItems = document.querySelectorAll('.navbar-item');
    navItems.forEach(item => {
      item.classList.remove('active');
      if (item.getAttribute('data-route') === route) {
        item.classList.add('active');
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é
    const sidebarLinks = document.querySelectorAll('.nav-link');
    sidebarLinks.forEach(link => {
      link.classList.remove('active');
      if (link.getAttribute('data-route') === route) {
        link.classList.add('active');
      }
    });
  }

  updateTitle(title) {
    document.title = `${title} - Dogymorbis`;
  }

  updateLayout() {
    const body = document.body;
    if (window.innerWidth <= 768) {
      body.classList.add('mobile');
    } else {
      body.classList.remove('mobile');
    }
  }

  updateUI() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—Å—Ç–æ—á–µ–∫
    const boneBalance = this.stateManager.getBoneBalance();
    const boneBalanceEl = document.querySelector('.bone-balance .balance');
    if (boneBalanceEl) {
      boneBalanceEl.textContent = boneBalance;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const unreadCount = this.stateManager.getUnreadCount();
    const notificationBadge = document.querySelector('.notification-badge');
    if (notificationBadge) {
      if (unreadCount > 0) {
        notificationBadge.textContent = unreadCount;
        notificationBadge.style.display = 'block';
      } else {
        notificationBadge.style.display = 'none';
      }
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.classList.add('show');
    }, 100);
    
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => {
        document.body.removeChild(notification);
      }, 300);
    }, 3000);
  }

  showError(message) {
    this.showNotification(message, 'error');
  }

  showInstallPrompt() {
    const prompt = document.createElement('div');
    prompt.className = 'install-prompt';
    prompt.innerHTML = `
      <div class="install-prompt-content">
        <h3>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Dogymorbis?</h3>
        <p>–ü–æ–ª—É—á–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞</p>
        <div class="install-prompt-buttons">
          <button class="button" onclick="this.installApp()">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
          <button class="button secondary" onclick="this.dismissInstall()">–ü–æ–∑–∂–µ</button>
        </div>
      </div>
    `;
    
    document.body.appendChild(prompt);
  }

  async installApp() {
    if (this.deferredPrompt) {
      this.deferredPrompt.prompt();
      const { outcome } = await this.deferredPrompt.userChoice;
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', outcome);
      this.deferredPrompt = null;
    }
  }

  dismissInstall() {
    const prompt = document.querySelector('.install-prompt');
    if (prompt) {
      document.body.removeChild(prompt);
    }
  }

  showWelcomeScreen() {
    if (!this.stateManager.getUser()) {
      this.router.navigate('/welcome');
    }
  }

  // –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
  startBackgroundTasks() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    this.locationInterval = setInterval(() => {
      this.updateLocation();
    }, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    this.syncInterval = setInterval(() => {
      this.syncData();
    }, 60000); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  pauseBackgroundTasks() {
    if (this.locationInterval) {
      clearInterval(this.locationInterval);
    }
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
    }
  }

  resumeBackgroundTasks() {
    this.startBackgroundTasks();
  }

  async updateLocation() {
    try {
      const position = await this.getCurrentPosition();
      this.stateManager.setLocation(position);
      await this.services.map.updateLocation(position);
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:', error);
    }
  }

  async syncData() {
    try {
      await this.services.auth.syncUserData();
      await this.services.chat.syncMessages();
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  async syncOfflineData() {
    try {
      await this.services.auth.syncOfflineData();
      await this.services.chat.syncOfflineMessages();
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  async getCurrentPosition() {
    return new Promise((resolve, reject) => {
      if (!navigator.geolocation) {
        reject(new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'));
        return;
      }
      
      navigator.geolocation.getCurrentPosition(
        (position) => {
          resolve({
            lat: position.coords.latitude,
            lng: position.coords.longitude,
            accuracy: position.coords.accuracy
          });
        },
        (error) => {
          reject(error);
        },
        {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 60000
        }
      );
    });
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.DogymorbisApp = new DogymorbisApp();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
  window.DogymorbisApp.init();
}); 